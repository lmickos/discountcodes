# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server import util


class Discount(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, offer: int=None, customerid: int=None, code: str=None, creationdate: datetime=None, status: str=None, checksum: Object=None):  # noqa: E501
        """Discount - a model defined in Swagger

        :param id: The id of this Discount.  # noqa: E501
        :type id: int
        :param offer: The offer of this Discount.  # noqa: E501
        :type offer: int
        :param customerid: The customerid of this Discount.  # noqa: E501
        :type customerid: int
        :param code: The code of this Discount.  # noqa: E501
        :type code: str
        :param creationdate: The creationdate of this Discount.  # noqa: E501
        :type creationdate: datetime
        :param status: The status of this Discount.  # noqa: E501
        :type status: str
        :param checksum: The checksum of this Discount.  # noqa: E501
        :type checksum: Object
        """
        self.swagger_types = {
            'id': int,
            'offer': int,
            'customerid': int,
            'code': str,
            'creationdate': datetime,
            'status': str,
            'checksum': Object
        }

        self.attribute_map = {
            'id': 'id',
            'offer': 'offer',
            'customerid': 'customerid',
            'code': 'code',
            'creationdate': 'creationdate',
            'status': 'status',
            'checksum': 'checksum'
        }
        self._id = id
        self._offer = offer
        self._customerid = customerid
        self._code = code
        self._creationdate = creationdate
        self._status = status
        self._checksum = checksum

    @classmethod
    def from_dict(cls, dikt) -> 'Discount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Discount of this Discount.  # noqa: E501
        :rtype: Discount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Discount.

        Id number of discount  # noqa: E501

        :return: The id of this Discount.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Discount.

        Id number of discount  # noqa: E501

        :param id: The id of this Discount.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def offer(self) -> int:
        """Gets the offer of this Discount.

        Id number of offer  # noqa: E501

        :return: The offer of this Discount.
        :rtype: int
        """
        return self._offer

    @offer.setter
    def offer(self, offer: int):
        """Sets the offer of this Discount.

        Id number of offer  # noqa: E501

        :param offer: The offer of this Discount.
        :type offer: int
        """
        if offer is None:
            raise ValueError("Invalid value for `offer`, must not be `None`")  # noqa: E501

        self._offer = offer

    @property
    def customerid(self) -> int:
        """Gets the customerid of this Discount.

        Id number of the customer that received the discount  # noqa: E501

        :return: The customerid of this Discount.
        :rtype: int
        """
        return self._customerid

    @customerid.setter
    def customerid(self, customerid: int):
        """Sets the customerid of this Discount.

        Id number of the customer that received the discount  # noqa: E501

        :param customerid: The customerid of this Discount.
        :type customerid: int
        """

        self._customerid = customerid

    @property
    def code(self) -> str:
        """Gets the code of this Discount.

        The code given to the customer  # noqa: E501

        :return: The code of this Discount.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this Discount.

        The code given to the customer  # noqa: E501

        :param code: The code of this Discount.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def creationdate(self) -> datetime:
        """Gets the creationdate of this Discount.


        :return: The creationdate of this Discount.
        :rtype: datetime
        """
        return self._creationdate

    @creationdate.setter
    def creationdate(self, creationdate: datetime):
        """Sets the creationdate of this Discount.


        :param creationdate: The creationdate of this Discount.
        :type creationdate: datetime
        """
        if creationdate is None:
            raise ValueError("Invalid value for `creationdate`, must not be `None`")  # noqa: E501

        self._creationdate = creationdate

    @property
    def status(self) -> str:
        """Gets the status of this Discount.

        Status of this discount code  # noqa: E501

        :return: The status of this Discount.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Discount.

        Status of this discount code  # noqa: E501

        :param status: The status of this Discount.
        :type status: str
        """
        allowed_values = ["precreated", "dormant", "valid", "invalid", "archived"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def checksum(self) -> Object:
        """Gets the checksum of this Discount.

        Hash sum of the discount data  # noqa: E501

        :return: The checksum of this Discount.
        :rtype: Object
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum: Object):
        """Sets the checksum of this Discount.

        Hash sum of the discount data  # noqa: E501

        :param checksum: The checksum of this Discount.
        :type checksum: Object
        """

        self._checksum = checksum
