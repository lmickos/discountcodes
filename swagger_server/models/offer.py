# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Offer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, description: str=None, type: str=None, value: str=None, callbackuri: str=None, createdby: str=None):  # noqa: E501
        """Offer - a model defined in Swagger

        :param id: The id of this Offer.  # noqa: E501
        :type id: int
        :param description: The description of this Offer.  # noqa: E501
        :type description: str
        :param type: The type of this Offer.  # noqa: E501
        :type type: str
        :param value: The value of this Offer.  # noqa: E501
        :type value: str
        :param callbackuri: The callbackuri of this Offer.  # noqa: E501
        :type callbackuri: str
        :param createdby: The createdby of this Offer.  # noqa: E501
        :type createdby: str
        """
        self.swagger_types = {
            'id': int,
            'description': str,
            'type': str,
            'value': str,
            'callbackuri': str,
            'createdby': str
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'type': 'type',
            'value': 'value',
            'callbackuri': 'callbackuri',
            'createdby': 'createdby'
        }
        self._id = id
        self._description = description
        self._type = type
        self._value = value
        self._callbackuri = callbackuri
        self._createdby = createdby

    @classmethod
    def from_dict(cls, dikt) -> 'Offer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Offer of this Offer.  # noqa: E501
        :rtype: Offer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Offer.


        :return: The id of this Offer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Offer.


        :param id: The id of this Offer.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self) -> str:
        """Gets the description of this Offer.

        Describes the discount in human readable text (i7n solution to come)  # noqa: E501

        :return: The description of this Offer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Offer.

        Describes the discount in human readable text (i7n solution to come)  # noqa: E501

        :param description: The description of this Offer.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def type(self) -> str:
        """Gets the type of this Offer.

        Type of discount. Defines how the discount works (i7n solution to come)  # noqa: E501

        :return: The type of this Offer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Offer.

        Type of discount. Defines how the discount works (i7n solution to come)  # noqa: E501

        :param type: The type of this Offer.
        :type type: str
        """
        allowed_values = ["static", "percentageoneitem", "percentageonebuy", "external"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self) -> str:
        """Gets the value of this Offer.

        Internal machine readable definition of discount  # noqa: E501

        :return: The value of this Offer.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this Offer.

        Internal machine readable definition of discount  # noqa: E501

        :param value: The value of this Offer.
        :type value: str
        """

        self._value = value

    @property
    def callbackuri(self) -> str:
        """Gets the callbackuri of this Offer.

        The callback uri for informing the company of discount creation The discount id and coupon code will be added as search parameters (discountid, couponcode).  # noqa: E501

        :return: The callbackuri of this Offer.
        :rtype: str
        """
        return self._callbackuri

    @callbackuri.setter
    def callbackuri(self, callbackuri: str):
        """Sets the callbackuri of this Offer.

        The callback uri for informing the company of discount creation The discount id and coupon code will be added as search parameters (discountid, couponcode).  # noqa: E501

        :param callbackuri: The callbackuri of this Offer.
        :type callbackuri: str
        """

        self._callbackuri = callbackuri

    @property
    def createdby(self) -> str:
        """Gets the createdby of this Offer.

        Identifies the creator of the offer  # noqa: E501

        :return: The createdby of this Offer.
        :rtype: str
        """
        return self._createdby

    @createdby.setter
    def createdby(self, createdby: str):
        """Sets the createdby of this Offer.

        Identifies the creator of the offer  # noqa: E501

        :param createdby: The createdby of this Offer.
        :type createdby: str
        """
        if createdby is None:
            raise ValueError("Invalid value for `createdby`, must not be `None`")  # noqa: E501

        self._createdby = createdby
